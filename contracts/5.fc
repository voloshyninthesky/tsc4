{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

global int a, b, c, d;

() recv_internal() {
}

tuple fib(int n, tuple res) {
    if (n == 370) {
        res = empty_tuple();
        res~tpush(58472848379039952684853851736901133239741266891456844557261755914039063645794);  
        res~tpush(94611056096305838013295371573764256526437182762229865607320618320601813254535);  
        return res;      
    }
    if (n == 371) {
        res = empty_tuple();
        res~tpush(94611056096305838013295371573764256526437182762229865607320618320601813254535);  
        return res;      
    }
    if (n == 0) {
        res = empty_tuple();
        res~tpush(0);
        res~tpush(1);
        return res;
    }
    res = fib(n / 2, res);
    a = res.first();
    b = res.second();
    c = a * ((b << 1) - a);
    d = a * a + b * b;
    if (n % 2 == 0) {
        res = empty_tuple();
        res~tpush(c);
        res~tpush(d);
    } else {
        res = empty_tuple();
        res~tpush(d);
        res~tpush(c + d);
    }
    return res;
}

;; testable
tuple fibonacci_sequence(int n, int k) method_id {
    tuple res = empty_tuple();
    if (k == 0) {
        return res;
    }
    tuple fibs = fib(n, res);
    (int a, int b) = (fibs.first(), fibs.second());
    res~tpush(a);
    k = k - 1;
    n = n + 1;
    while (k > 0) {
        if (n == 371) {
          res~tpush(94611056096305838013295371573764256526437182762229865607320618320601813254535);
        } else {
          res~tpush(b);
          (a, b) = (b, a + b);
        }
        k = k - 1;
    }
    return res;
}
