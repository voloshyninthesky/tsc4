{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

int tlen(tuple t) asm "TLEN";
forall X -> X tget(tuple t, int idx) asm "INDEXVAR";


() recv_internal() {
}

tuple matrix_multiplier(tuple a, tuple b) {
    tuple res = empty_tuple();
    int x1 = (tget(a, 0) * tget(b, 0)) + (tget(a, 1) * tget(b, 2));
    int x2 = (tget(a, 0) * tget(b, 1)) + (tget(a, 1) * tget(b, 3));
    int x3 = (tget(a, 2) * tget(b, 0)) + (tget(a, 3) * tget(b, 2));
    int x4 = (tget(a, 2) * tget(b, 1)) + (tget(a, 3) * tget(b, 3));
    res~tpush(x1);
    res~tpush(x2);
    res~tpush(x3);
    res~tpush(x4);
    return res;
}


(tuple) pow(tuple a, int n) {
    tuple res = empty_tuple();
    res~tpush(1);
    res~tpush(0);
    res~tpush(0);
    res~tpush(1);
    while (n != 0) {
        if (n % 2 != 0) {
            res = matrix_multiplier(res, a); 
        }
        n = n / 2; 
        a = matrix_multiplier(a, a); 
    }
    return res; 
}


int fib(int n) {
    if (n <= 0) {
        return 0;
    }
    if (n == 1) {
        return 1;
    }
    if (n == 2) {
        return 1;
    }
    tuple x = empty_tuple();
    x~tpush(1);
    x~tpush(1);
    x~tpush(1);
    x~tpush(0);
    x = pow(x, n); 

    return tget(x, 1);
}

(int, int) slow_fib(int n) {
    if (n = 0) {
        return (0, 0);
    }
    if (n = 1) {
        return (0, 1); 
    }
    (int a, int b) = (0, 1); 
    repeat (n) {
        (a, b) = (b, a + b);
    }
    return (a, b); 
}

;; testable
tuple fibonacci_sequence(int n, int k) method_id {
    tuple res = empty_tuple();
    if (k == 0) {
        return res; 
    }
    int cur = 0; 
    int prev = 0; 
    if (n > 255) {
        (prev, cur) = slow_fib(n);
    } else {
        prev = fib(n - 1);
        cur = fib(n);
    }
    res~tpush(cur);
    k = k - 1;
    while (k > 0) {
        (prev, cur) = (cur, prev + cur); 
        if (prev == 0) {
            cur = 1;
        }
        res~tpush(cur);
        k = k - 1;
    }
    return res;
}
