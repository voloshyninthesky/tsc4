{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

global int a, b, c, d;


() recv_internal() {
}


(tuple) fast(int n, int k) asm """
    0 PUSHINT
    1 PUSHINT  
    3 ROLL
    REPEAT:<{ 2DUP ADD }> 
    DEPTH DEC PICK
    3 PUSHINT ONLYTOPX  
    DEC DEC
    REPEAT:<{ 2DUP ADD }>
    DEPTH
    TUPLEVAR
""";

(tuple) fast2(int n, int k) asm """
    0 PUSHINT
    1 PUSHINT  
    3 ROLL
    DEC
    REPEAT:<{ 2DUP ADD }>
    1 PUSHINT ONLYTOPX
    ONE TUPLEVAR 
""";

(int, int) fib(int n) {
    if (n == 370) {
        return (0, 0);      
    }
    if (n == 0) {
        return (0, 1);
    }
    (a, b) = fib(n / 2);
    c = a * ((b << 1) - a);
    d = a * a + b * b;
    if (n % 2 == 0) {
        return (c, d);
    } else {
        return (d, c + d);
    }
}

tuple slow(int n, int k) method_id {
    int last = 94611056096305838013295371573764256526437182762229865607320618320601813254535;
    tuple res = empty_tuple();
    if (k == 0) {
        return res;
    }
    (a, b) = fib(n);
    if (a == 0) & (b == 0) {
        a = last; 
    }
    while (k > 0) {
        res~tpush(a);
        if (b != last) {
            (a, b) = (b, a + b);
            k = k - 1;
        } else {
            k = 0;
            res~tpush(b);
        }
    }
    return res;
}

;; testable
tuple fibonacci_sequence(int n, int k) method_id {
    int last = 94611056096305838013295371573764256526437182762229865607320618320601813254535;
    tuple res = empty_tuple();
    if (k == 0) {
        return res;
    }
    if (n == 370) {
        res~tpush(last); 
        return res; 
    }
    if (k == 1) {
        return fast2(n, k);
    }
    if (n > 250) | (k < 2) {
        return slow(n, k);
    }
    return fast(n, k); 
}

